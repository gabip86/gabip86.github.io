{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OASeA,EAPA,kBACX,gCACI,oBAAIC,UAAU,yBAAd,4BACA,oBAAIA,UAAU,4BAAd,6DCKOC,EARF,SAAAC,GAAK,OACd,uBAAMC,SAAUD,EAAME,WAAtB,UACI,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,uBAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,qDCwBOC,EA5BC,SAAAN,GAAK,OACjB,sBAAKF,UAAU,gBAAf,UAEIE,EAAMO,MAAQP,EAAMQ,SAAW,oBAAGV,UAAU,eAAb,uBACvB,uBAAMA,UAAU,iBAAhB,cAAmCE,EAAMO,KAAzC,KAAiDP,EAAMQ,cAI/DR,EAAMS,aAAe,oBAAGX,UAAU,eAAb,0BACb,uBAAMA,UAAU,iBAAhB,cAAmCE,EAAMS,kBAIjDT,EAAMU,UAAY,oBAAGZ,UAAU,eAAb,uBACV,uBAAMA,UAAU,iBAAhB,cAAmCE,EAAMU,eAIjDV,EAAMW,aAAe,oBAAGb,UAAU,eAAb,yBACb,uBAAMA,UAAU,iBAAhB,cAAmCE,EAAMW,kBAIjDX,EAAMY,OAAS,oBAAGd,UAAU,iBAAb,cAAgCE,EAAMY,aCpBvDC,EAAU,mCAqEDC,E,4MAlEXC,MAAQ,CACJN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAGXd,W,uCAAa,WAAOe,GAAP,qBAAAC,EAAA,6DACTD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAHjC,SAIcC,MAAM,oDAAD,OAAqDhB,EAArD,YAA6DC,EAA7D,4BAAwFK,EAAxF,kBAJnB,cAIHW,EAJG,gBAKUA,EAASC,OALnB,OAKHC,EALG,OAMLnB,GAAQC,EACR,EAAKmB,SAAS,CACVlB,YAAaiB,EAAKE,KAAKC,KACvBtB,KAAMmB,EAAKtB,KACXI,QAASkB,EAAKI,IAAItB,QAClBE,SAAUgB,EAAKE,KAAKlB,SACpBC,YAAae,EAAKK,QAAQ,GAAGpB,YAC7BC,MAAO,KAGX,EAAKe,SAAS,CACVlB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,6BAtBN,4C,6GA4BT,OACI,8BACI,qBAAKd,UAAU,UAAf,SACI,qBAAKA,UAAU,OAAf,SACI,8BACI,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,2BAAf,SACI,cAAC,EAAD,MAEJ,sBAAKA,UAAU,0BAAf,UACI,cAAC,EAAD,CAAMI,WAAY8B,KAAK9B,aACvB,cAAC,EAAD,CACIO,YAAauB,KAAKjB,MAAMN,YACxBF,KAAMyB,KAAKjB,MAAMR,KACjBC,QAASwB,KAAKjB,MAAMP,QACpBE,SAAUsB,KAAKjB,MAAML,SACrBC,YAAaqB,KAAKjB,MAAMJ,YACxBC,MAAOoB,KAAKjB,MAAMH,0B,GAvDxCqB,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.17a4ab93.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather finder</h1>\r\n        <h3 className=\"title-container__subtitle\">Find out temperature conditions and more...</h3>\r\n    </div>\r\n)\r\n\r\nexport default Titles","import React from 'react'\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\"></input>\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\"></input>\r\n        <button>Get weather</button>\r\n    </form>\r\n)\r\n\r\nexport default Form","import React from 'react'\r\n\r\nconst Weather = props => (\r\n    <div className=\"weather__info\">\r\n        { \r\n        props.city && props.country && <p className=\"weather__key\"> Location:\r\n                <span className=\"weather__value\"> {props.city}, {props.country}</span>\r\n            </p> \r\n        }\r\n        { \r\n        props.temperature && <p className=\"weather__key\"> Temperature: \r\n                <span className=\"weather__value\"> {props.temperature}</span>\r\n            </p> \r\n        }\r\n        { \r\n        props.humidity && <p className=\"weather__key\"> Humidity: \r\n                <span className=\"weather__value\"> {props.humidity}</span>\r\n            </p> \r\n        }\r\n        { \r\n        props.description && <p className=\"weather__key\"> Conditions: \r\n                <span className=\"weather__value\"> {props.description}</span>\r\n            </p> \r\n        }\r\n        { \r\n        props.error && <p className=\"weather__error\"> {props.error}</p> \r\n        }\r\n    </div>\r\n)\r\n\r\nexport default Weather","import React from 'react'\r\nimport Titles from './components/Titles'\r\nimport Form from './components/Form'\r\nimport Weather from './components/Weather'\r\n\r\nconst API_KEY = \"18dfd2c940d8d11d45bebfe8f5c4f86f\"\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: undefined\r\n    }\r\n\r\n    getWeather = async (e) => {\r\n        e.preventDefault()\r\n        const city = e.target.elements.city.value;\r\n        const country = e.target.elements.country.value;\r\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&mode=json&appid=${API_KEY}&units=metric`);\r\n        const data = await api_call.json();\r\n        if (city && country) {\r\n            this.setState({\r\n                temperature: data.main.temp,\r\n                city: data.name,\r\n                country: data.sys.country,\r\n                humidity: data.main.humidity,\r\n                description: data.weather[0].description,\r\n                error: \"\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                temperature: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                humidity: undefined,\r\n                description: undefined,\r\n                error: \"Please enter the values!\"\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <div className=\"wrapper\">\r\n                    <div className=\"main\">\r\n                        <div>\r\n                            <div className=\"row-weather\">\r\n                                <div className=\"col-xs-5 title-container\">\r\n                                    <Titles />\r\n                                </div>\r\n                                <div className=\"col-xs-7 form-container\">\r\n                                    <Form getWeather={this.getWeather}/>\r\n                                    <Weather \r\n                                        temperature={this.state.temperature}\r\n                                        city={this.state.city}\r\n                                        country={this.state.country}\r\n                                        humidity={this.state.humidity}\r\n                                        description={this.state.description}\r\n                                        error={this.state.error}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}